---
# tasks file for bvansomeren.lldpd
- name: Ensure lldpd is installed
  ansible.builtin.package:
    name: "{{ lldp_package_name[ansible_os_family] }}"
    state: present
  register: reg_lldpd_install_package
  when:
    - lldp_enable
    - ansible_virtualization_role != "guest" or ansible_virtualization_role != "NA"

- name: Ensure lldpd is started and available at boot
  ansible.builtin.service:
    name: "{{ lldp_service_name[ansible_os_family] }}"
    state: started
    enabled: true
  when:
    - lldp_enable
    - ansible_virtualization_role != "guest" or ansible_virtualization_role != "NA"
    - ansible_connection != 'chroot'

- name: Enable lldpd in chroot images
  ansible.builtin.command: systemctl enable {{ lldp_service_name[ansible_os_family] }}
  when:
    - lldp_enable
    - ansible_connection == "chroot"

- name: Transmit tlvs with lldptool on RedHat if we just installed lldpd
  ansible.builtin.command: "/usr/sbin/lldptool -i {{ item[0] }} -T -V {{ item[1].id }} enableTx={{ item[1].enableTx }}"
  changed_when: true
  with_nested:
    - "{{ ansible_interfaces | replace('.', '') | regex_replace('_.*_', '') }}" # skip vlan and alias interfaces
    - "{{ lldp_tlvs }}"
  when:
    - lldp_enable # defaults to True
    - lldp_transmit_sysname  # defaults to True
    - vars['ansible_' ~ item[0]] is defined # only if there are facts available for this interface
    - vars['ansible_' ~ item[0]]['active'] == true # only active interfaces
    - vars['ansible_' ~ item[0]]['type'] == "ether" # only for ethernet interfaces
    - item[0] in lldp_sysname_interfaces # this list only has variable internal_interface or "em1" if that is not defined by default
    - reg_lldpd_install_package.changed or lldp_sysname_force is defined # only when we just installed lldp or if lldp_sysname_force is defined
    - ansible_os_family == "RedHat"
    - ansible_virtualization_role != "guest" or ansible_virtualization_role != "NA" # not on virtual machines or where ansible can't detect
    - ansible_connection != 'chroot'
  notify:
    - restart lldpad

# On bigger clusters lldpad leaks memory like crazy (hundreds of megabytes to gigabytes of memory per week)
# Restart it weekly during the night
- name: "Add weekly cronjob to restart {{ lldp_service_name[ansible_os_family] }}"
  ansible.builtin.cron:
    name: Cronjob to restart memoryleaking lldpad
    state: present
    weekday: 1
    minute: 20
    hour: 0
    job: "systemctl restart {{ lldp_service_name[ansible_os_family] }}"
  when:
    - lldp_autorestart
